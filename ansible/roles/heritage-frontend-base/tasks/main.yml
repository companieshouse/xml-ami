---
- name: Install dependencies
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  package:
    name: '{{ item }}'
    state: present
  with_items: '{{ required_packages }}'
  
- name: Set SELinux to permissive
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  selinux:
    policy: targeted
    state: permissive

- name: install boto and botocore
  pip:
    name: ['boto', 'boto3', 'botocore']
    executable: /usr/local/bin/pip

- name: Create groups
  group:
    name: '{{ item }}'
    gid: '{{ gid_value }}'
    state: present
  with_items: '{{ user_groups }}'

- name: Create users
  user:
    name: "{{ item.0 }}"
    groups: "{{ item.1 }}"
    state: present
  loop: "{{ users|zip(user_groups)|list }}"

# Can only download one s3 object at a time
- name: Download Oracle setup files from s3 - basic rpm
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_files_oracle_basic_rpm }}'
    dest: "/tmp/{{ s3_files_oracle_basic_rpm_name }}"
    mode: get

- name: Download Oracle setup files from s3 - devel rpm
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_files_oracle_devel_rpm }}'
    dest: "/tmp/{{ s3_files_oracle_devel_rpm_name }}"
    mode: get

- name: Download Oracle setup files from s3 - sqlplus rpm
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_files_oracle_sqlplus_rpm }}'
    dest: "/tmp/{{ s3_files_oracle_sqlplus_rpm_name }}"
    mode: get

- name: Download static application files from s3
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_file_app_static }}'
    dest: "/tmp/{{ s3_files_app_static_name }}"
    mode: get

- name: Download application files from s3
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_file_app }}'
    dest: "/tmp/{{ s3_files_app_name }}"
    mode: get

- name: Unarchive tar files
  unarchive:
    remote_src: yes
    src: "/tmp/{{ item }}"
    dest: /tmp/
  with_items: '{{ tar_files }}'

 # Using 3 separate tasks as using a list caused failures in concourse pipeline
- name: Install Oracle packages - basic
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  yum:
     name: "/tmp/{{ s3_files_oracle_basic_rpm_name }}"
     state: present

- name: Install Oracle packages - devel
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  yum:
     name: "/tmp/{{ s3_files_oracle_devel_rpm_name }}"
     state: present

- name: Install Oracle packages - sqlplus
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  yum:
     name: "/tmp/{{ s3_files_oracle_sqlplus_rpm_name }}"
     state: present

- name: Ensure env variables are set
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  lineinfile:
    path: "{{ user_home_path }}/.bash_profile"
    line: '{{ item }}'
  with_items: '{{ env_var }}'

- name: Add config to ld.so.conf
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  lineinfile:
    path: /etc/ld.so.conf
    line: '{{ item }}'
  with_items: '{{ ld_so_conf }}'

- name: Run ldconfig
  command: /sbin/ldconfig

- name: Remove any exisitng Perl binaries
  file:
    path: "{{ item }}"
    state: absent
  with_items: '{{ perl_binaries }}'

- name: Install Perl binaries
  copy:
    src: "/tmp/{{ item }}/"
    dest: "/{{ item }}"
    remote_src: yes
  with_items: '{{ perl_binaries }}'
   
- name: Install base application files to home path
  copy:
    src: "/tmp/{{ item[0] }}"
    dest: "{{ user_home_path }}"
    owner: "{{ item[1] }}"
    group: "{{ item[2] }}"
    remote_src: yes
  loop: "{{ user_home_path_content|product(users, user_groups)|list }}"

- name: Remove base application installation files
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items: '{{ user_home_path_content_delete }}'

- name: Delete installation files
  find:
    paths: /tmp
    patterns: '{{ files_to_remove }}'  
  register: files_to_delete

- name: Remove installation files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"

- name: Remove any exisitng httpd.conf
  file:
    path: "{{ item }}"
    state: absent
  with_items: '{{ http_conf }}'

- name: Install httpd configs
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  copy:
    src: "{{ item[0] }}"
    dest: "/etc/{{ item[0] }}"
    owner: '{{ item[1] }}'
    group: '{{ item[2] }}'
    mode: 0775
  loop: "{{ http_config|product(users, user_groups)|list }}"
