---
- name: Set SELinux to permissive
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  selinux:
    policy: targeted
    state: permissive

- name: install boto and botocore
  pip:
    name: ['boto', 'boto3', 'botocore']
    executable: /usr/local/bin/pip

- name: Create groups
  group:
    name: "chlservices"
    gid: "600"
    state: present

- name: Create users
  user:
    name: '{{ item.name }}'
    groups: '{{ item.groups }}'
    state: present
  with_items: '{{ users }}'

# Can only download one s3 object at a time
- name: Download Oracle setup files from s3 - basic rpm
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_files_oracle_basic_rpm }}'
    dest: "/tmp/{{ s3_files_oracle_basic_rpm_name }}"
    mode: get

- name: Download Oracle setup files from s3 - devel rpm
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_files_oracle_devel_rpm }}'
    dest: "/tmp/{{ s3_files_oracle_devel_rpm_name }}"
    mode: get

- name: Download Oracle setup files from s3 - sqlplus rpm
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_files_oracle_sqlplus_rpm }}'
    dest: "/tmp/{{ s3_files_oracle_sqlplus_rpm_name }}"
    mode: get

- name: Download static application files from s3
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_file_app_static }}'
    dest: "/tmp/{{ s3_files_app_static_name }}"
    mode: get

- name: Download application files from s3
  aws_s3:
    bucket: '{{ s3_bucket }}'
    object: '{{ s3_file_app }}'
    dest: "/tmp/{{ s3_files_app_name }}"
    mode: get

- name: Unarchive tar files
  unarchive:
    remote_src: yes
    src: "/tmp/{{ item }}"
    dest: /tmp/
  with_items: '{{ tar_files }}'

# tmp debug
- name: Find /tmp output
  command: ls -l /tmp
  register: tmpoutput
  ignore_errors: true
- name: Output of /tmp
  ansible.builtin.debug:
    msg: "{{ tmpoutput }}"
  ignore_errors: true

  # tmp debug 2
- name: Find /tmp/usr/local/lib output
  command: ls -l /tmp/usr/local/lib
  register: tmpoutput2
  ignore_errors: true
- name: Output of /tmp/usr/local/lib
  ansible.builtin.debug:
    msg: "{{ tmpoutput2 }}"
  ignore_errors: true


 # Using 3 separate tasks as using a list caused failures in concourse pipeline
- name: Install Oracle packages - basic
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  yum:
     name: "/tmp/{{ s3_files_oracle_basic_rpm_name }}"
     state: present

- name: Install Oracle packages - devel
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  yum:
     name: "/tmp/{{ s3_files_oracle_devel_rpm_name }}"
     state: present

- name: Install Oracle packages - sqlplus
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  yum:
     name: "/tmp/{{ s3_files_oracle_sqlplus_rpm_name }}"
     state: present

- name: Ensure env variables are set
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  lineinfile:
    path: "{{ user_home_path }}/.bash_profile"
    line: '{{ item }}'
  with_items: '{{ env_var }}'

- name: Add config to ld.so.conf
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  lineinfile:
    path: /etc/ld.so.conf
    line: '{{ item }}'
  with_items: '{{ ld_so_conf }}'

- name: Run ldconfig
  command: /sbin/ldconfig

# /usr/lib64/perl5/vendor_perl before debug
- name: Find /usr/lib64/perl5/vendor_perl output before
  command: ls -l /usr/lib64/perl5/vendor_perl
  register: usroutput27
  ignore_errors: true
- name: Output of /usr/lib64/perl5/vendor_perl before
  ansible.builtin.debug:
    msg: "{{ usroutput27 }}"
  ignore_errors: true

- name: Remove any exisitng Perl binaries
  file:
    path: "{{ item }}"
    state: absent
  with_items: '{{ perl_binaries }}'

# /usr/local/lib64/perl5 debug
- name: Find /usr/local/lib64/perl5 output after delete
  command: ls -l /usr/local/lib64/perl5
  register: usroutput30
  ignore_errors: true
- name: Output of /usr/local/lib64/perl5 after delete
  ansible.builtin.debug:
    msg: "{{ usroutput30 }}"
  ignore_errors: true

# /usr/lib64/perl5/vendor_perl debug
- name: Find /usr/lib64/perl5/vendor_perl output after delete
  command: ls -l /usr/lib64/perl5/vendor_perl
  register: usroutput31
  ignore_errors: true
- name: Output of /usr/lib64/perl5/vendor_perl delete
  ansible.builtin.debug:
    msg: "{{ usroutput31 }}"
  ignore_errors: true

# /usr/local/lib debug
- name: Find /usr/local/lib output
  command: ls -l /usr/local/lib
  register: usroutput
  ignore_errors: true
- name: Output of /usr/local/lib
  ansible.builtin.debug:
    msg: "{{ usroutput }}"
  ignore_errors: true

#- name: Install Perl binaries
  #copy:
    #src: /tmp/usr
    #dest: /
    #remote_src: yes

- name: Install Perl binaries
  copy:
    src: "/tmp/{{ item }}/"
    dest: "/{{ item }}"
    remote_src: yes
  with_items:
    - usr/local/lib64/perl5
    - usr/local/share/perl5
    - usr/lib64/perl5
    - usr/share/perl5
    - usr/lib64/perl5/vendor_perl
    - usr/share/perl5/vendor_perl

#- name: Install Perl binaries - /usr/local/lib64/perl5
  #copy:
    #src: /tmp/usr/local/lib64/perl5
    #dest: /usr/local/lib64/
    #remote_src: yes

# /usr/local/lib64/perl5 debug
- name: Find /usr/local/lib64/perl5 output after
  command: ls -l /usr/local/lib64/perl5
  register: usroutput25
  ignore_errors: true
- name: Output of /usr/local/lib64/perl5
  ansible.builtin.debug:
    msg: "{{ usroutput25 }}"
  ignore_errors: true

# /usr/lib64/perl5/vendor_perl debug
- name: Find /usr/lib64/perl5/vendor_perl output after
  command: ls -l /usr/lib64/perl5/vendor_perl
  register: usroutput26
  ignore_errors: true
- name: Output of /usr/lib64/perl5/vendor_perl
  ansible.builtin.debug:
    msg: "{{ usroutput26 }}"
  ignore_errors: true

# /usr/local/lib debug
- name: Find /usr/local/lib output after
  command: ls -l /usr/local/lib
  register: usroutput2
  ignore_errors: true
- name: Output of /usr/local/lib after
  ansible.builtin.debug:
    msg: "{{ usroutput2 }}"
  ignore_errors: true

- name: Install base application files to home path
  copy:
    src: "/tmp/{{ item }}"
    dest: '{{ user_home_path }}'
    owner: '{{ user }}'
    group: '{{ group }}'
    remote_src: yes
  with_items: '{{ user_home_path_content }}'

- name: Remove base application installation files
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items: '{{ user_home_path_content_delete }}'

# /home/xml debug
- name: Find /home/xml output after
  command: ls -l /home/xml
  register: homexml
  ignore_errors: true
- name: Output of /home/xml after
  ansible.builtin.debug:
    msg: "{{ homexml }}"
  ignore_errors: true

- name: Delete installation files
  find:
    paths: /tmp
    patterns: '{{ files_to_remove }}'  
  register: files_to_delete

- name: Remove installation files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"

- name: Remove any exisitng httpd.conf
  file:
    path: '{{ item }}'
    state: absent
  with_items: '{{ http_conf }}'

- name: Install httpd configs
  vars:
    ansible_python_interpreter: /usr/bin/python2.6
  copy:
    src: "{{ item }}"
    dest: "/etc/{{ item }}"
    owner: '{{ user }}'
    group: '{{ group }}'
    mode: 0775
  with_items: '{{ http_config }}'
